services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v3.0
    # Enables the web UI and tells Traefik to listen to docker
    # Activate ping to enable Traefik healthcheck
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --ping=true
      - --experimental.plugins.traefik-plugin.modulename=github.com/jlfxt/traefik-plugin
      - --experimental.plugins.traefik-plugin.version=v0.1.3
      - --log.level=DEBUG
    # Call traefik healthcheck.
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 30s
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro

  astroapi:
    image: tylergannon/astroapi:latest
    volumes:
      - astroapi_logs:/var/log
    environment:
      REDIS_URL: redis://redis
    labels:
      # Enable Traefik to listen to this container over HTTP and forward /astropi to port 80
      # Enable traefik.
      - traefik.enable=true

      # Forward auth.
      - traefik.http.middlewares.astroapi-auth.forwardauth.address=http://auth:80
      - traefik.http.middlewares.astroapi-auth.forwardauth.trustforwardheader=true

      - traefik.http.middlewares.astroapi-cacheheaders.headers.customresponseheaders.Cache-Control=public, max-age=31536000, immutable
      # Middleware to strip /astroapi from the path.
      - traefik.http.middlewares.strip-astroapi.stripprefix.prefixes=/astroapi

      - traefik.http.routers.astroapi.rule=Host(`dev.home`) && PathPrefix(`/astroapi`)
      - traefik.http.routers.astroapi.middlewares=astroapi-auth,strip-astroapi,astroapi-cacheheaders
      - traefik.http.routers.astroapi.priority=20
      - traefik.http.routers.astroapi.entrypoints=web
      - traefik.http.routers.astroapi.service=astroapi
      - traefik.http.services.astroapi.loadbalancer.server.port=80
    depends_on:
      redis:
        condition: service_healthy
      traefik:
        condition: service_healthy

  mongodb:
    build: servers/mongo
    hostname: mongodb
    container_name: mongodb
    environment:
      MONGO_INITDB_DATABASE: transitweb
    volumes:
      - mongo_data:/data/db
      - mongo_configdata:/data/configdb
      - ./.out/mongodb-initdb:/docker-entrypoint-initdb.d:ro
  auth:
    image: tylergannon/lucia-auth-server
    hostname: auth
    container_name: auth
    volumes:
      - ./servers/auth/index.ts:/app/index.ts:ro
    environment:
      REDIS_URL: redis://redis
    labels:
      - traefik.enable=true
      - traefik.http.services.auth.loadbalancer.server.port=80
      - traefik.http.routers.auth.rule=Host(`auth.home`)
      - traefik.http.routers.auth.entrypoints=web
      - traefik.http.routers.auth.service=auth
    depends_on:
      traefik:
        condition: service_healthy
  mailcrab:
    image: marlonb/mailcrab
    hostname: mailcrab
    environment:
      - SMTP_PORT=25
    labels:
      - traefik.enable=true
      - traefik.http.services.mailcrab.loadbalancer.server.port=1080
      - traefik.http.routers.mailcrab.rule=Host(`mailcrab.home`)
      - traefik.http.routers.mailcrab.entrypoints=web
      - traefik.http.routers.mailcrab.service=mailcrab
  redis:
    image: redis
    command:
      [
        'redis-server',
        '--maxmemory',
        '200mb',
        '--maxmemory-policy',
        'volatile-lru'
      ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'set', 'HEALTHCHECK', '1' ]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 40s

volumes:
  astroapi_logs:
  mongo_configdata:
  mongo_data:
  redis_data:

