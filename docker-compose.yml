services:
  frontend:
    # This will be a NGINX Unit server that will proxy to a node server.
    # We may want to replace that with regular NGINX.
    # For now the architecture will be:
    # NGINX Unit -> Node -> AstroAPI / db
    # But we will use a Homespun NGINX Unit built on top of Alpine Linux.
    build:
      context: ./servers/frontend
    ports:
      - "443:443"
      - "80:80"
    networks: frontend: {}
    secrets:
      - source: tls-bundle-astroapi
        target: astroapi.pem
      - source: tls-bundle-transitweb
        target: transitweb.pem
  dev:
    profiles:
      - dev
    ports:
      - "5173:5173"
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      db_connection: "postgresql://user:password@db:5432/db"
    depends_on:
      db:
        condition: service_healthy
      astroapi:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fI", "http://localhost:5173/" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 120s
    networks:
      frontend:
        ipv4_address: 10.1.2.2
    volumes:
      - web_logs:/var/log
      - ./scripts/init_dev.fish:/opt/start.sh
      - ./:/app
      - dev_node_modules:/app/node_modules

  astroapi:
    image: tylergannon/astroapi:latest
    volumes:
      - astroapi_logs:/var/log
      - ./scripts/start.sh:/opt/start.fish
    environment:
      # TODO: change name to something like KEY_NAME.
      BUNDLE: astroapi
    ports:
      - "8080:80"
    networks:
      frontend: {}
    healthcheck:
      test: [ "CMD", "curl", "-fI", "http://localhost/api/v1/openapi.json" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 120s
  db:
    image: postgres:alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: db
    networks:
      frontend: {}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h $$(hostname -i)"
        ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 60s


networks:
  frontend:
    name: transitweb_frontend
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/16
          ip_range: 10.1.1.0/24


volumes:
  astroapi_logs:
  frontend_logs:
  web_logs:
  db_data:
  dev_node_modules:
  frontend_node_modules: