services:
  # First we need a server based on the latest postgres:alpine image.
  # We will name it "db" so we can reference it later on.
  db:
    image: postgres:alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: db
    networks:
      frontend: {}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h $$(hostname -i)"
        ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 60s

  frontend:
    # This image receives a
    image: nginx/unit:1.29.0-node18
    platform: linux/amd64
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./build:/app
      - frontend_node_modules:/app/node_modules:rw
      - ./scripts/init_app.js:/app/init_app.js
      - ./cert/transitweb.pem:/docker-entrypoint.d/transitweb.pem
      - ./scripts/init_frontend.sh:/docker-entrypoint.d/config.sh
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#depends_on
    networks:
      frontend: {}
    depends_on:
      db:
        condition: service_healthy
      astroapi:
        condition: service_healthy
  dev:
    profiles:
      - dev
    ports:
      - "5173:5173"
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      db_connection: "postgresql://user:password@db:5432/db"
    depends_on:
      db:
        condition: service_healthy
      astroapi:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fI", "http://localhost:5173/" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 120s
    networks:
      frontend:
        ipv4_address: 10.1.2.2
    volumes:
      - web_logs:/var/log
      - ./scripts/init_dev.fish:/opt/start.sh
      - ./:/app
      - dev_node_modules:/app/node_modules

  astroapi:
    image: tylergannon/astroapi:latest
    volumes:
      - astroapi_logs:/var/log
      - ./scripts/start.sh:/opt/start.fish
    environment:
      # TODO: change name to something like KEY_NAME.
      BUNDLE: astroapi
    ports:
      - "8080:80"
    networks:
      frontend: {}
    healthcheck:
      test: [ "CMD", "curl", "-fI", "http://localhost/api/v1/openapi.json" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 120s

networks:
  frontend:
    name: transitweb_frontend
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/16
          ip_range: 10.1.1.0/24


volumes:
  astroapi_logs:
  frontend_logs:
  web_logs:
  db_data:
  dev_node_modules:
  frontend_node_modules: